const RootOption = require("./root/index");
const Context = require("./context");
const rubFinances = require("./../rub-finances");
const settings = require("./../config"); // get from context
const balanceManager = require("./../balance-manager");
const models = require("./../../db/models");
const ExchangeRate = models.ExchangeRate;
const numberFormatter = require("./../number-formatter");

const BotNavigation = function(bot) {
  let context = new Context(bot);
  let rootOption = new RootOption(context);

  bot.command("–Ω–∞—á–∞—Ç—å", async ctx => {
    ctx.reply(...(await rootOption.reply(ctx)));
    await context.findOrCreateAccount(ctx);
    rootOption.registerReplies(ctx);
  });

  // TODO: refactor
  const adminId = settings.get("shared.admins")[0] || 0;
  rootOption.registerReplies({ message: { from_id: adminId } });

  // TODO: refactor
  bot.on(async ctx => {
    // HINT: beforeReply FIRST (maybe could improve?)
    // in order to cancel chat (back button)
    const menuItem = context.findResponsibleItem(ctx);
    let transitionAllowed;
    if (menuItem) {
      transitionAllowed = await menuItem.transitionAllowed(ctx);
      if (transitionAllowed) await menuItem.beforeProcess(ctx);
    }

    const vkId = context.getUserId(ctx);
    // check for chat message reply from user
    const chattedContext = ctx.session.chattedContext || {};
    if (chattedContext.chatAllowed) {
      if (chattedContext.withdrawRub) {
        const phoneNumber = ctx && ctx.message && ctx.message.text;
        if (/^79\d{9}$/.test(phoneNumber)) {
          const account = await context.findOrCreateAccount(ctx);
          const accountBalance = account.rubAmountInRub();

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ –≤ —Å–∏—Å—Ç–µ–º–µ
          const systemBalance = await balanceManager.getRubBalance();
          if (systemBalance < account.rubAmount) {
            context.sendMessageToAdmins(
              `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RUB –¥–ª—è –≤—ã–≤–æ–¥–∞ ${numberFormatter.formatRub(
                accountBalance
              )}`
            );
            message = `
            üí± –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RUB –≤ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è –≤—ã–≤–æ–¥–∞!
            `;
            bot.sendMessage(vkId, message);
            return;
          }

          const feedbackUrl = settings.get("shared.feedback_url");
          const isWithdrawSucceeded = await rubFinances.withdrawRub(
            account,
            phoneNumber
          );

          if (isWithdrawSucceeded) {
            const message = `
            ‚úî –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ QIWI –∫–æ—à–µ–ª—ë–∫ +${phoneNumber} ${numberFormatter.formatRub(
              accountBalance
            )} ‚ÇΩ!

            üìà –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤: ${feedbackUrl}
            `;
            bot.sendMessage(vkId, message);
            // reset chatted context after processing it
            ctx.session.chattedContext = {};
          } else {
            const message = `
            ‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
            `;
            bot.sendMessage(vkId, message);
          }

          // TODO: save phone number for further withdraw?

          // ‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
        } else {
          bot.sendMessage(vkId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
        }
      } else if (chattedContext.setExchangeRate) {
        let canProceed = false;
        const rawText = ctx && ctx.message && ctx.message.text;
        if (!rawText) bot.sendMessage(vkId, "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞");

        const tokens = rawText.split("/");
        if (!tokens.length === 2)
          bot.sendMessage(vkId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞");

        try {
          const sellRate = parseInt(tokens[0]);
          const buyRate = parseInt(tokens[1]);
          if (Number.isNaN(sellRate) || Number.isNaN(buyRate))
            bot.sendMessage(vkId, "–ü–µ—Ä–µ–¥–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ");
          else if (sellRate <= buyRate) {
            canProceed = true;
            bot.sendMessage(
              vkId,
              "–û–±—ã—á–Ω–æ –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å –∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏, –∏–Ω–∞—á–µ —ç—Ç–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ –Ω–µ –≤—ã–≥–æ–¥–Ω–æ"
            );
          } else {
            canProceed = true;
          }

          if (canProceed) {
            const isSuccess = await ExchangeRate.setExchangeRate(
              sellRate,
              buyRate
            );
            if (isSuccess) bot.sendMessage(vkId, "–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            else bot.sendMessage(vkId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫—É—Ä—Å–∞");
          }
        } catch (error) {
          console.error(error.message);
          bot.sendMessage(vkId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫—É—Ä—Å–∞");
        }
      }

      return;
    }

    // menu navigation response
    // const menuItem = context.findResponsibleItem(ctx);
    if (!menuItem) return;

    // const transitionAllowed = await menuItem.transitionAllowed(ctx);
    if (transitionAllowed) {
      await menuItem.beforeReply(ctx);
      ctx.reply(...(await menuItem.reply(ctx)));
    } else {
      // HINT: negative scenario could be played via negative reply?
      bot.sendMessage(vkId, menuItem.forbiddenTransitionChatMessage(ctx));
    }
  });

  // debugging
  this.getUrl = async function() {
    const ctx = {
      message: { payload: JSON.stringify({ button: "top_up_rub_button" }) }
    };
    const menuItem = context.findResponsibleItem(ctx);
    const [chatMessage, ...rest] = await menuItem.reply(ctx);
    console.log("chatMessage:", chatMessage);

    // const url = await utils.getPaymentUrl("http:/ya.ru");
    // console.log(url);
  };

  // console.log(context);
};

module.exports = BotNavigation;
